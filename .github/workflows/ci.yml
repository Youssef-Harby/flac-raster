name: CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  PYTHON_VERSION: "3.11"

jobs:
  test:
    name: Test on ${{ matrix.os }} - Python ${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}
    timeout-minutes: 15
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.9", "3.10", "3.11", "3.12"]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install system dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y libflac-dev

    - name: Install system dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install flac

    - name: Install system dependencies (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        # Windows binaries are included with pyflac
        echo "No additional system dependencies needed on Windows"

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build
        pip install -e .

    - name: Create test data
      run: |
        python examples/create_test_data.py

    - name: Test CLI installation
      run: |
        flac-raster --help

    - name: Test conversions
      run: |
        # Test DEM conversion (force overwrite since test data already exists)
        flac-raster convert test_data/sample_dem.tif --force
        flac-raster convert test_data/sample_dem.flac -o test_data/dem_test.tif --force
        flac-raster compare test_data/sample_dem.tif test_data/dem_test.tif
        
        # Test RGB conversion
        flac-raster convert test_data/sample_rgb.tif --force
        flac-raster convert test_data/sample_rgb.flac -o test_data/rgb_test.tif --force
        flac-raster compare test_data/sample_rgb.tif test_data/rgb_test.tif
        
        # Test multispectral conversion
        flac-raster convert test_data/sample_multispectral.tif --force
        flac-raster convert test_data/sample_multispectral.flac -o test_data/ms_test.tif --force
        flac-raster compare test_data/sample_multispectral.tif test_data/ms_test.tif

    - name: Test info command
      run: |
        flac-raster info test_data/sample_dem.tif
        flac-raster info test_data/sample_dem.flac

    - name: Test spatial tiling and HTTP range streaming
      run: |
        # Test spatial conversion
        flac-raster convert test_data/sample_dem.tif -o test_data/dem_spatial.flac --spatial --tile-size=256 --force
        flac-raster spatial-info test_data/dem_spatial.flac
        
        # Test bbox queries (local files only in CI)
        flac-raster query test_data/dem_spatial.flac --bbox="34.0,28.5,34.5,29.0"
        
        # Test RGB spatial conversion
        flac-raster convert test_data/sample_rgb.tif -o test_data/rgb_spatial.flac --spatial --tile-size=128 --force
        flac-raster spatial-info test_data/rgb_spatial.flac
        flac-raster query test_data/rgb_spatial.flac --bbox="-120.0,36.98,-119.98,37.0"

    - name: Validate package structure
      run: |
        # Test that the package can be imported
        python -c "from src.flac_raster.converter import RasterFLACConverter; print('Package imports correctly')"
        python -c "from src.flac_raster.compare import compare_tiffs; print('Compare module imports correctly')"
        python -c "from src.flac_raster.cli import app; print('CLI module imports correctly')"
        python -c "from src.flac_raster.spatial_encoder import SpatialFLACStreamer; print('Spatial encoder imports correctly')"

    - name: Run integration tests
      run: |
        # Run integration tests for core functionality
        echo "Running integration tests via CLI commands..."
        
        # Test lazy loading integration (local only, no internet dependency in CI)
        python -c "
        import sys, os
        sys.path.insert(0, os.path.join('src'))
        from flac_raster.spatial_encoder import SpatialFLACStreamer
        from pathlib import Path
        
        # Test local spatial FLAC loading
        test_file = Path('test_data/dem_spatial.flac')
        if test_file.exists():
            streamer = SpatialFLACStreamer(test_file)
            print(f'✓ Loaded spatial index with {len(streamer.spatial_index.frames)} tiles')
            print(f'✓ Total bytes: {streamer.spatial_index.total_bytes:,}')
            
            # Test bbox query
            ranges = streamer.get_byte_ranges_for_bbox((34.0, 28.5, 34.5, 29.0))
            print(f'✓ Bbox query returned {len(ranges)} byte ranges')
            print('✓ All spatial encoding tests passed!')
        else:
            print('✗ Spatial test file not found')
            sys.exit(1)
        "

  build:
    name: Build package
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine

    - name: Build package
      run: |
        python -m build

    - name: Check package
      run: |
        python -m twine check dist/*

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist
        path: dist/

  publish:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.event_name == 'release' && github.event.action == 'published'
    environment: release
    permissions:
      id-token: write  # For trusted publishing

    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist
        path: dist/

    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        print-hash: true